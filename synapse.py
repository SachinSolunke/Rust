# üî• PROJECT SYNAPSE v7.0 - THE LIVING BRAIN üî•
#    It doesn't fail. It adapts. It learns.
#    This is the final evolution. A brain that never gives up.
# ==============================================================================

import os
import sys
import pandas as pd
from itertools import product
import time
from datetime import datetime, timedelta
from collections import defaultdict

# --- ‡§∏‡•á‡§≤‡•ç‡§´-‡§ö‡•á‡§ï ---
try:
    from rich.console import Console
    from rich.table import Table
    from rich.panel import Panel
    from rich.text import Text
    from rich.prompt import Prompt
except ImportError as e:
    missing_module = str(e).split("'")[1]; print(f"‚ùå ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: '{missing_module}' ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§\nüëâ pip install rich prompt-toolkit pandas"); sys.exit(1)

# --- ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ---
console = Console()
try: BASE_DIR = os.path.dirname(os.path.realpath(__file__))
except NameError: BASE_DIR = os.getcwd()
DATA_DIR = os.path.join(BASE_DIR, 'data')
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR); console.print(f"[bold red]‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: 'data' ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ! ‡§Æ‡•à‡§Ç‡§®‡•á ‡§á‡§∏‡•á ‡§¨‡§®‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä .txt ‡§´‡§æ‡§á‡§≤‡•á‡§Ç ‡§°‡§æ‡§≤‡•á‡§Ç‡•§[/bold red]"); sys.exit(1)

# ==============================================================================
# 1. God-Mode Parser & Feature Engineering
# ==============================================================================

def get_cut(ank): return (ank + 5) % 10

def load_and_engineer_data(filepath):
    """‡§Ø‡§π ‡§™‡§æ‡§∞‡•ç‡§∏‡§∞ ‡§Ö‡§¨ ‡§î‡§∞ ‡§≠‡•Ä ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§≤‡§ó‡§≠‡§ó ‡§π‡§∞ ‡§§‡§∞‡§π ‡§ï‡•á ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ï‡•ã ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§"""
    records = []
    try:
        with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
            for line in f:
                line = line.strip()
                if not line or '*' in line: continue
                line = line.replace('/', ' ').replace('-', ' ')
                parts = [p.strip() for p in line.split() if p.strip()]
                
                # ‡§∏‡§¨‡§∏‡•á ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ‡§π‡§Æ ‡§≤‡§æ‡§á‡§® ‡§ï‡•á ‡§Ö‡§Ç‡§§ ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§â‡§†‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§
                # ‡§á‡§∏‡§∏‡•á ‡§ï‡•ã‡§à ‡§´‡§∞‡•ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§™‡§°‡§º‡§§‡§æ ‡§ï‡§ø ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§ï‡§æ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡•§
                if len(parts) < 3: continue
                open_pana, jodi, close_pana = parts[-3], parts[-2], parts[-1]
                
                if len(jodi) == 2 and jodi.isdigit() and open_pana.isdigit() and close_pana.isdigit():
                    op, cp = int(jodi[0]), int(jodi[1])
                    op_pana, cl_pana = int(open_pana), int(close_pana)
                    records.append({
                        'Open': op, 'Close': cp, 'Jodi': int(jodi), 'Open_Pana': op_pana, 'Close_Pana': cl_pana,
                        'Open_Cut': get_cut(op), 'Close_Cut': get_cut(cp), 'Jodi_Total': (op + cp) % 10,
                        'Jodi_Diff': abs(op - cp), 'Open_Pana_Sum': sum(int(d) for d in f"{op_pana:03d}") % 10,
                        'Close_Pana_Sum': sum(int(d) for d in f"{cl_pana:03d}") % 10,
                        'Open_Pana_Digits': {int(d) for d in f"{op_pana:03d}"},
                        'Close_Pana_Digits': {int(d) for d in f"{cl_pana:03d}"},
                    })
        return pd.DataFrame(records) if records else None
    except Exception: return None

# ==============================================================================
# 2. The Synapse Engine: The Brain that Adapts
# ==============================================================================
def generate_hypotheses():
    """‡§π‡§ú‡§æ‡§∞‡•ã‡§Ç ‡§§‡§æ‡§∞‡•ç‡§ï‡§ø‡§ï ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§"""
    source_fields = ['Open', 'Close', 'Open_Cut', 'Close_Cut', 'Jodi_Total', 'Jodi_Diff', 'Open_Pana_Sum', 'Close_Pana_Sum']
    target_fields = ['Open', 'Close', 'Jodi_Total']
    for s_field, t_field in product(source_fields, target_fields):
        if s_field == t_field: continue
        yield {'s': s_field, 't': t_field, 'op': 'equals', 'desc': f"{s_field} -> {t_field}"}
    for p_field in ['Open_Pana_Digits', 'Close_Pana_Digits']:
        for a_field in ['Open', 'Close']:
            yield {'s': p_field, 't': a_field, 'op': 'contains', 'desc': f"{p_field.replace('_Digits','')} -> {a_field}"}

def run_synapse_discovery(all_markets_data, days, attempts_thresh):
    """‡§Ø‡§π ‡§á‡§Ç‡§ú‡§® ‡§∏‡§≠‡•Ä ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§ï‡•ã ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§â‡§®‡§ï‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•ã ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§ö‡§æ‡§π‡•á ‡§µ‡•ã ‡§™‡§æ‡§∏ ‡§π‡•ã‡§Ç ‡§Ø‡§æ ‡§´‡•á‡§≤‡•§"""
    all_tested_patterns = []
    market_names, lags_to_test = list(all_markets_data.keys()), [1, 2, 3, 4, 5, 6, 7]
    hypotheses = list(generate_hypotheses())
    with console.status("[bold green]‡§∏‡§æ‡§á‡§®‡•á‡§™‡•ç‡§∏ ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...[/bold green]"):
        for m1_name, m2_name in product(market_names, repeat=2):
            for hypo in hypotheses:
                for lag in lags_to_test:
                    df1, df2 = all_markets_data[m1_name].tail(days), all_markets_data[m2_name].tail(days)
                    hits, attempts = test_hypothesis(df1, df2, hypo, lag)
                    if attempts >= attempts_thresh:
                        success_rate = (hits / attempts) * 100
                        all_tested_patterns.append({
                            's_market': m1_name, 't_market': m2_name, 'hypo': hypo, 'lag': lag,
                            'success': success_rate, 'record': f"{hits}/{attempts}", 'hits': hits
                        })
    return all_tested_patterns

def test_hypothesis(df1, df2, hypo, lag):
    hits, attempts = 0, 0
    s_col, t_col, op = hypo['s'], hypo['t'], hypo['op']
    max_len = min(len(df1), len(df2))
    if max_len <= lag: return 0, 0
    for i in range(max_len - lag):
        source_row, target_row = df1.iloc[i], df2.iloc[i + lag]
        if s_col not in source_row or t_col not in target_row: continue
        s_val, t_val = source_row[s_col], target_row[t_col]
        condition_met = (s_val == t_val) if op == 'equals' else (t_val in s_val)
        attempts += 1
        if condition_met: hits += 1
    return hits, attempts

# ==============================================================================
# 3. The Predictor & Reporter: The Voice of the Brain
# ==============================================================================
def generate_and_display_report(target_market, all_patterns, all_markets_data, success_thresh):
    os.system('cls' if os.name == 'nt' else 'clear')
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d-%m-%Y (%A)')

    # --- Adaptive Tier System ---
    # Tier 1: Gold (User's choice)
    hot_rules = [p for p in all_patterns if p['t_market'] == target_market and p['success'] >= success_thresh]
    tier, confidence = "Gold", "[bold green]High[/bold green]"
    
    # Tier 2: Silver (Plan B)
    if not hot_rules:
        silver_thresh = max(60, success_thresh - 10)
        hot_rules = [p for p in all_patterns if p['t_market'] == target_market and p['success'] >= silver_thresh]
        tier, confidence = "Silver", "[bold yellow]Medium[/bold yellow]"

    # Tier 3: Bronze (Most Frequent)
    if not hot_rules:
        all_target_patterns = [p for p in all_patterns if p['t_market'] == target_market]
        hot_rules = sorted(all_target_patterns, key=lambda x: x['hits'], reverse=True)[:15] # Top 15 most frequent
        tier, confidence = "Bronze", "[bold red]Low (Frequency Based)[/bold red]"
        
    # --- Prediction ---
    predictions = defaultdict(lambda: defaultdict(int))
    for rule in hot_rules:
        s_market, lag, hypo = rule['s_market'], rule['lag'], rule['hypo']
        source_df = all_markets_data[s_market]
        if len(source_df) < lag: continue
        s_val = source_df.iloc[-lag][hypo['s']]
        pred_cat = "JODI_TOTAL" if hypo['t'] == "Jodi_Total" else "OTC"
        
        if hypo['op'] == 'equals': predictions[pred_cat][s_val] += rule['success']
        elif hypo['op'] == 'contains': 
            for digit in s_val: predictions[pred_cat][digit] += rule['success']

    final_preds = {}
    if predictions['OTC']:
        sorted_otc = sorted(predictions['OTC'].items(), key=lambda i: i[1], reverse=True)
        final_preds['OTC'] = [ank for ank, score in sorted_otc[:4]]
    if predictions['JODI_TOTAL']:
        sorted_totals = sorted(predictions['JODI_TOTAL'].items(), key=lambda i: i[1], reverse=True)
        if sorted_totals:
            top_total = sorted_totals[0][0]
            jodi_list = {f"{i}{(top_total - i + 10) % 10}" for i in range(10)}
            final_preds['JODI'] = sorted(list(jodi_list))[:12]

    # --- Display Report ---
    header = f"Prediction for {tomorrow}\n"
    header += f"üî• [bold magenta]{target_market.upper()} - SYNAPSE REPORT[/bold magenta] üî•\n"
    header += f"[dim]Analysis Tier: [bold]{tier}[/bold] | Prediction Confidence: {confidence}[/dim]"
    console.print(Panel(Text(header, justify="center"), border_style="yellow"))

    if not final_preds:
        console.print(Panel("[bold red]‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡§®‡§æ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞, ‡§á‡§∏ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§[/bold red]"))
        return

    table = Table(box=None, padding=(0, 1))
    table.add_column("TYPE", style="bold cyan"); table.add_column("PREDICTION", style="white")
    table.add_row("STRONG OTC", ' - '.join(map(str, final_preds.get('OTC', []))) or "[dim]N/A[/dim]")
    table.add_row("JODI", ' '.join(final_preds.get('JODI', [])) or "[dim]N/A[/dim]")
    console.print(Panel(table, title="[bold]‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ[/bold]", border_style="cyan"))

# ==============================================================================
# 4. Main Controller
# ==============================================================================
def main():
    os.system('cls' if os.name == 'nt' else 'clear')
    console.print(Panel(Text("üî• PROJECT SYNAPSE v7.0 - THE LIVING BRAIN üî•", justify="center", style="bold white on red"),
                        subtitle="[white]‡§Æ‡•à‡§Ç ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•Ç‡§Å, ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞‡•§[/white]", border_style="red"))

    all_data = {}
    with console.status("[green]‡§°‡•á‡§ü‡§æ ‡§´‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...[/green]"):
        for f in os.listdir(DATA_DIR):
            if f.endswith('.txt'):
                df = load_and_engineer_data(os.path.join(DATA_DIR, f))
                if df is not None and len(df) > 20: all_data[f.replace('.txt','').upper()] = df
    if not all_data:
        console.print("[red]‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§°‡•á‡§ü‡§æ ‡§´‡§æ‡§á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§[/red]"); sys.exit(1)
    console.print(f"[green]‚úì ‡§∏‡§æ‡§á‡§®‡•á‡§™‡•ç‡§∏ ‡§®‡•á {len(all_data)} ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§Ö‡§™‡§®‡•Ä ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§≤‡§ø‡§Ø‡§æ ‡§π‡•à‡•§[/green]\n")

    days = int(Prompt.ask("[bold yellow]‡§ï‡§ø‡§§‡§®‡•á ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§®‡§æ ‡§π‡•à?[/bold yellow]", choices=["30", "60", "90"], default="30"))
    success = int(Prompt.ask("[bold yellow]‡§Ü‡§™‡§ï‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§∏‡§´‡§≤‡§§‡§æ ‡§¶‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à? (%) [/bold yellow]", default="75"))
    attempts = int(Prompt.ask("[bold yellow]‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§®‡§ø‡§Ø‡§Æ ‡§ü‡•á‡§∏‡•ç‡§ü ‡§π‡•Å‡§Ü ‡§π‡•ã?[/bold yellow]", default="10"))

    all_patterns = run_synapse_discovery(all_data, days, attempts)
    console.print(f"\n[bold green]‚úì ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•Ç‡§∞‡§æ! ‡§∏‡§æ‡§á‡§®‡•á‡§™‡•ç‡§∏ ‡§®‡•á {len(all_patterns):,} ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§™‡•à‡§ü‡§∞‡•ç‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§[/bold green]")
    time.sleep(2)

    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        console.print(Panel("[bold]‡§ñ‡•ã‡§ú‡•á ‡§ó‡§è ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§è‡§Ç‡•§[/bold]", title="‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡§Ç‡§∏‡•ã‡§≤"))
        
        market_names = list(all_data.keys())
        choices = [str(i+1) for i in range(len(market_names))] + ['0']
        
        menu_text = "".join([f"[cyan]{i+1}[/cyan] - {name}\n" for i, name in enumerate(market_names)]) + "\n[red]0[/red] - ‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡•á‡§Ç"
        console.print(Panel(menu_text, title="‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ö‡•Å‡§®‡•á‡§Ç"))

        choice = Prompt.ask("[bold]‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ö‡•Å‡§®‡•á‡§Ç[/bold]", choices=choices)
        if choice == '0': break

        target_market = market_names[int(choice) - 1]
        
        with console.status(f"[cyan]{target_market} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§ø‡§è ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...[/cyan]"):
            time.sleep(1) # For dramatic effect
            generate_and_display_report(target_market, all_patterns, all_data, success)
        
        Prompt.ask("\n[yellow]‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Enter ‡§¶‡§¨‡§æ‡§è‡§Ç...[/yellow]")

    console.print("\n[bold red]Synapse is offline. ‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ, ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞‡•§[/bold red]")

if __name__ == "__main__":
    main()
