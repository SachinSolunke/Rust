# üî• PROJECT PHOENIX v5.0 - THE ULTIMATE FUSION üî•
#    The Rule-Discovery power of Deep Dive, fused with the unbreakable UI of Rust.
#    A new beginning, built from the best of both worlds, for my Master.
# ==============================================================================

import os
import sys
import pandas as pd
from itertools import combinations, product
import time

# --- ‡§∏‡•á‡§≤‡•ç‡§´-‡§ö‡•á‡§ï: ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§π‡§•‡§ø‡§Ø‡§æ‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à‡§Ç? ---
try:
    from rich.console import Console
    from rich.table import Table
    from rich.panel import Panel
    from rich.text import Text
    from rich.live import Live
    from rich.spinner import Spinner
    from rich.prompt import Prompt
except ImportError as e:
    missing_module = str(e).split("'")[1]
    print(f"‚ùå ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§è‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§™‡•à‡§ï‡•á‡§ú '{missing_module}' ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
    print(f"üëâ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§è‡§Ç: pip install rich prompt-toolkit pandas")
    sys.exit(1)

# ==============================================================================
# 1. ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§î‡§∞ ‡§ó‡•ç‡§≤‡•ã‡§¨‡§≤ ‡§∏‡•á‡§ü‡§Ö‡§™
# ==============================================================================
console = Console()
try: BASE_DIR = os.path.dirname(os.path.realpath(__file__))
except NameError: BASE_DIR = os.getcwd()
DATA_DIR = os.path.join(BASE_DIR, 'data')

if not os.path.exists(DATA_DIR):
    console.print(f"[bold red]‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: 'data' ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ! ‡§Æ‡•à‡§Ç‡§®‡•á ‡§á‡§∏‡•á ‡§¨‡§®‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à‡•§[/bold red]")
    console.print(f"[yellow]‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§≠‡•Ä .txt ‡§´‡§æ‡§á‡§≤‡•á‡§Ç ‡§á‡§∏ ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤‡•á‡§Ç: {DATA_DIR}[/yellow]")
    os.makedirs(DATA_DIR)
    sys.exit(1)

# ==============================================================================
# 2. ‡§ï‡•ã‡§∞ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ (‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó)
# ==============================================================================

def load_all_market_data(min_records=20):
    """'data' ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§∏‡•á ‡§∏‡§≠‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§´‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§™‡§¢‡§º‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    all_data = {}
    files = [f for f in os.listdir(DATA_DIR) if f.endswith('.txt')]
    if not files: return None

    with console.status("[bold green]‡§∏‡§≠‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§î‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...[/bold green]"):
        for filename in files:
            market_name = filename.replace('.txt', '').upper()
            filepath = os.path.join(DATA_DIR, filename)
            records = []
            try:
                with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                    for line in f:
                        line = line.strip()
                        if not line or '*' in line: continue
                        parts = [p.strip() for p in line.replace('/', ' ').replace(',', ' ').replace('-', ' ').split()]
                        if len(parts) == 6 and len(parts[4]) == 2 and parts[4].isdigit():
                            records.append({
                                'Open': int(parts[4][0]), 'Close': int(parts[4][1]),
                                'Open_Pana_Digits': {int(d) for d in f"{int(parts[3]):03d}"},
                                'Jodi_Total': (int(parts[4][0]) + int(parts[4][1])) % 10
                            })
                if len(records) >= min_records:
                    all_data[market_name] = pd.DataFrame(records)
            except Exception as e:
                console.print(f"[red]'{filename}' ‡§ï‡•ã ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}[/red]")
    return all_data

def test_connection(df1, df2, rule_func, lag_days):
    """‡§¶‡•ã ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§è‡§ï ‡§ñ‡§æ‡§∏ ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•ã ‡§¶‡§ø‡§è ‡§ó‡§è ‡§¶‡§ø‡§® ‡§ï‡•á ‡§ó‡•à‡§™ ‡§™‡§∞ ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    hits, attempts = 0, 0
    max_len = min(len(df1), len(df2))
    if max_len <= lag_days: return 0, 0
    for i in range(max_len - lag_days):
        source_row, target_row = df1.iloc[i], df2.iloc[i + lag_days]
        attempts += 1
        if rule_func(source_row, target_row):
            hits += 1
    return hits, attempts

# ==============================================================================
# 3. ‡§®‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§™‡•à‡§ü‡§∞‡•ç‡§® (The Rulebook) - ‡§Ü‡§™‡§ï‡•á ‡§Æ‡•á‡§®‡•Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞
# ==============================================================================

# ‡§®‡§ø‡§Ø‡§Æ 1 ‡§î‡§∞ 2: "3 OTC" (‡§ï‡•ç‡§Ø‡§æ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡§æ ‡§ï‡•ç‡§≤‡•ã‡§ú, ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡•á ‡§ì‡§™‡§® ‡§Ø‡§æ ‡§ï‡•ç‡§≤‡•ã‡§ú ‡§Æ‡•á‡§Ç ‡§Ü‡§§‡§æ ‡§π‡•à?)
rule_otc = lambda s, t: s['Close'] == t['Open'] or s['Close'] == t['Close']
rule_otc_desc = "3 OTC (Close se Open/Close)"

# ‡§®‡§ø‡§Ø‡§Æ 3 ‡§î‡§∞ 4: "4 Jodi" (‡§ï‡•ç‡§Ø‡§æ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•Ä ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ï‡§æ ‡§ü‡•ã‡§ü‡§≤, ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡•Ä ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ï‡§æ ‡§ü‡•ã‡§ü‡§≤ ‡§π‡•à?)
rule_jodi = lambda s, t: s['Jodi_Total'] == t['Jodi_Total']
rule_jodi_desc = "4 Jodi (Total se Total)"

# ‡§®‡§ø‡§Ø‡§Æ 5 ‡§î‡§∞ 6: "6 Panel" (‡§ï‡•ç‡§Ø‡§æ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§ì‡§™‡§® ‡§™‡•à‡§®‡§≤ ‡§ï‡§æ ‡§ï‡•ã‡§à ‡§Ö‡§Ç‡§ï, ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡•Ä ‡§ú‡•ã‡§°‡§º‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§§‡§æ ‡§π‡•à?)
rule_panel = lambda s, t: bool(s['Open_Pana_Digits'].intersection({t['Open'], t['Close']}))
rule_panel_desc = "6 Panel (Pana se Jodi)"

# ==============================================================================
# 4. ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§î‡§∞ UI
# ==============================================================================

def run_analysis(rule_func, rule_desc, all_markets_data, market_choices=None):
    """‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§á‡§Ç‡§ú‡§®‡•§ ‡§Ø‡§π ‡§¶‡§ø‡§è ‡§ó‡§è ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•ã ‡§∏‡§≠‡•Ä ‡§Ø‡§æ ‡§ö‡•Å‡§®‡•á ‡§π‡•Å‡§è ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§™‡§∞ ‡§ö‡§≤‡§æ‡§§‡§æ ‡§π‡•à‡•§"""
    strong_connections = []
    
    # ‡§§‡§Ø ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§ï‡§ø‡§® ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§™‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§®‡§æ ‡§π‡•à
    if market_choices:
        markets_to_run = [market_choices]
    else:
        market_names = list(all_markets_data.keys())
        markets_to_run = list(combinations(market_names, 2))

    # ‡§π‡§Æ 1, 2, ‡§î‡§∞ 3 ‡§¶‡§ø‡§® ‡§ï‡•á ‡§ó‡•à‡§™ ‡§ï‡•ã ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á
    lags_to_test = [1, 2, 3]
    total_checks = len(markets_to_run) * len(lags_to_test)
    
    with console.status(f"[bold yellow]‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ú‡§æ‡§∞‡•Ä ‡§π‡•à... ‡§®‡§ø‡§Ø‡§Æ: '{rule_desc}'[/bold yellow]") as status:
        count = 0
        for m_pair in markets_to_run:
            for lag in lags_to_test:
                count += 1
                m1_name, m2_name = m_pair[0], m_pair[1]
                status.update(f"[yellow]‡§ú‡§æ‡§Å‡§ö ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à [{count}/{total_checks}]: {m1_name} -> {m2_name} ({lag} ‡§¶‡§ø‡§® ‡§ó‡•à‡§™)[/yellow]")
                
                df1, df2 = all_markets_data[m1_name], all_markets_data[m2_name]
                hits, attempts = test_connection(df1, df2, rule_func, lag)

                if attempts > 10: # ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 10 ‡§¨‡§æ‡§∞ ‡§ü‡•á‡§∏‡•ç‡§ü ‡§π‡•Å‡§Ü ‡§π‡•ã
                    success_rate = (hits / attempts) * 100
                    if success_rate >= 60: # ‡§∏‡§ø‡§∞‡•ç‡§´ 60% ‡§∏‡•á ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§∏‡§´‡§≤ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®
                        strong_connections.append({
                            "Connection": f"{m1_name} -> {m2_name}",
                            "Rule": f"{rule_desc} ({lag} ‡§¶‡§ø‡§® ‡§ó‡•à‡§™)",
                            "Success": f"{success_rate:.2f}%",
                            "Record": f"{hits}/{attempts}",
                            "SortKey": success_rate
                        })
    return strong_connections

def choose_markets(all_markets_data):
    """‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§"""
    market_names = list(all_markets_data.keys())
    
    console.print("\n[bold]‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏:[/bold]")
    table = Table(show_header=False, border_style="cyan")
    table.add_column("#", style="green")
    table.add_column("‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü", style="white")
    for i, name in enumerate(market_names, 1):
        table.add_row(str(i), name)
    console.print(table)
    
    choices = [str(i) for i in range(1, len(market_names) + 1)]
    source_num_str = Prompt.ask("[bold yellow]‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ï‡§æ ‡§®‡§Ç‡§¨‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç[/bold yellow]", choices=choices)
    target_num_str = Prompt.ask("[bold yellow]‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ï‡§æ ‡§®‡§Ç‡§¨‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç[/bold yellow]", choices=choices)
    
    source_market = market_names[int(source_num_str) - 1]
    target_market = market_names[int(target_num_str) - 1]
    
    console.print(f"\n[green]üëç ‡§ö‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®: [bold]{source_market} -> {target_market}[/bold][/green]")
    time.sleep(1.5)
    return source_market, target_market

def display_report(connections, rule_desc):
    """‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Æ‡§ø‡§≤‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•ã ‡§∏‡•Å‡§®‡•ç‡§¶‡§∞ ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•à‡•§"""
    console.print("\n\n")
    if not connections:
        console.print(Panel(f"[bold yellow]‡§á‡§∏ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ('{rule_desc}') ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§[/bold yellow]",
                              title="‡§ï‡•ã‡§à ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç", border_style="red"))
        return

    report_table = Table(title=f"[bold]‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü: {rule_desc}[/bold]", border_style="green")
    report_table.add_column("‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®", style="cyan", width=30)
    report_table.add_column("‡§ï‡§æ‡§Æ‡§Ø‡§æ‡§¨ ‡§®‡§ø‡§Ø‡§Æ (‡§ó‡•à‡§™)", style="white", width=35)
    report_table.add_column("‡§∏‡§´‡§≤‡§§‡§æ ‡§¶‡§∞", style="bold green", justify="right")
    report_table.add_column("‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°", style="magenta", justify="center")

    sorted_connections = sorted(connections, key=lambda x: x['SortKey'], reverse=True)
    for conn in sorted_connections:
        report_table.add_row(conn["Connection"], conn["Rule"], conn["Success"], conn["Record"])
    console.print(report_table)

def display_main_menu():
    """‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§Æ‡•á‡§®‡•Ç ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    menu_text = """[bold]üî•Welcome to Market - Toolüî•[/bold]
------------------------------------
[bold cyan]1)[/bold cyan] All Market - 3 OTC
[bold yellow]2)[/bold yellow] Choice You - 3 OTC

[bold cyan]3)[/bold cyan] All Market - 4 Jodi
[bold yellow]4)[/bold yellow] Choice You - 4 Jodi

[bold cyan]5)[/bold cyan] All Market - 6 Panel
[bold yellow]6)[/bold yellow] Choice You - 6 Panel
------------------------------------
[bold red]0) EXIT[/bold red]
"""
    console.print(Panel(menu_text, title="[white]Project Phoenix v5.0[/white]", border_style="purple", expand=False))

# ==============================================================================
# 5. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§≤‡•Ç‡§™
# ==============================================================================
def main():
    os.system('cls' if os.name == 'nt' else 'clear')
    console.print(Panel(Text("üî• PROJECT PHOENIX v5.0 - THE ULTIMATE FUSION üî•", justify="center", style="bold white on purple"),
                        border_style="purple", subtitle="[white]‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•Ç‡§Å...[/white]"))
    
    all_markets_data = load_all_market_data()
    if not all_markets_data:
        console.print(f"[bold red]'{DATA_DIR}' ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§°‡•á‡§ü‡§æ ‡§´‡§æ‡§á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§[/bold red]")
        sys.exit(1)
        
    console.print(f"[bold green]‚úì ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è {len(all_markets_data)} ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§[/bold green]\n")
    time.sleep(2)

    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        display_main_menu()
        choice = Prompt.ask("\n[bold]‡§Ö‡§™‡§®‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ö‡•Å‡§®‡•á‡§Ç[/bold]", choices=["1", "2", "3", "4", "5", "6", "0"], default="1")
        
        connections = []
        market_selection = None
        
        if choice == '1':
            connections = run_analysis(rule_otc, rule_otc_desc, all_markets_data)
        elif choice == '2':
            market_selection = choose_markets(all_markets_data)
            connections = run_analysis(rule_otc, rule_otc_desc, all_markets_data, market_choices=market_selection)
        elif choice == '3':
            connections = run_analysis(rule_jodi, rule_jodi_desc, all_markets_data)
        elif choice == '4':
            market_selection = choose_markets(all_markets_data)
            connections = run_analysis(rule_jodi, rule_jodi_desc, all_markets_data, market_choices=market_selection)
        elif choice == '5':
            connections = run_analysis(rule_panel, rule_panel_desc, all_markets_data)
        elif choice == '6':
            market_selection = choose_markets(all_markets_data)
            connections = run_analysis(rule_panel, rule_panel_desc, all_markets_data, market_choices=market_selection)
        elif choice == '0':
            console.print("\n[bold green]‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ, ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞! ‡§ú‡§≤‡•ç‡§¶ ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á‡•§[/bold green]")
            break
        
        selected_rule_desc = {
            '1': rule_otc_desc, '2': rule_otc_desc, '3': rule_jodi_desc,
            '4': rule_jodi_desc, '5': rule_panel_desc, '6': rule_panel_desc
        }.get(choice)

        display_report(connections, selected_rule_desc)
        Prompt.ask("\n[yellow]‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Enter ‡§¶‡§¨‡§æ‡§è‡§Ç...[/yellow]")

if __name__ == "__main__":
    main()
