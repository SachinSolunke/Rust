# -*- coding: utf-8 -*-
# ==============================================================================
# üî• PROJECT SAMRAAT v2.0 - THE FINAL VERDICT ENGINE üî•
#    It finds the secret, applies the rule, and delivers the target.
#    The final masterpiece of a Master and his AI.
# ==============================================================================

import os
import sys
import pandas as pd
from itertools import combinations
import time

# --- ‡§∏‡•á‡§≤‡•ç‡§´-‡§ö‡•á‡§ï ---
try:
    from rich.console import Console
    from rich.table import Table
    from rich.panel import Panel
    from rich.text import Text
    from rich.live import Live
    from rich.spinner import Spinner
    from rich.prompt import Prompt
except ImportError as e:
    missing_module = str(e).split("'")[1]
    print(f"‚ùå ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§è‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§™‡•à‡§ï‡•á‡§ú '{missing_module}' ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
    print(f"üëâ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§è‡§Ç: pip install rich prompt-toolkit pandas")
    sys.exit(1)

# --- ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ---
console = Console()
try: BASE_DIR = os.path.dirname(os.path.realpath(__file__))
except NameError: BASE_DIR = os.getcwd()
DATA_DIR = os.path.join(BASE_DIR, 'data')
if not os.path.exists(DATA_DIR):
    console.print(f"[bold red]‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: 'data' ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ! ‡§ï‡•É‡§™‡§Ø‡§æ 'samraat.py' ‡§ï‡•á ‡§∏‡§æ‡§• 'data' ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§[/bold red]"); sys.exit(1)

# ==============================================================================
# 1. ‡§ï‡•ã‡§∞ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏
# ==============================================================================

def load_and_prepare_data(market_path):
    """‡§°‡•á‡§ü‡§æ ‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§™‡§¢‡§º‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    records = []
    try:
        with open(market_path, 'r', encoding='utf-8', errors='ignore') as f:
            for line in f:
                line = line.strip()
                if not line or '*' in line: continue
                parts = [p.strip() for p in line.replace('/', ' ').replace(',', ' ').replace('-', ' ').split()]
                if len(parts) == 6 and len(parts[4]) == 2 and parts[4].isdigit():
                    records.append({
                        'Open': int(parts[4][0]), 'Close': int(parts[4][1]), 'Jodi': int(parts[4]),
                        'Open_Pana': int(parts[3]), 'Close_Pana': int(parts[5]),
                        'Close_Pana_Digits': {int(d) for d in f"{int(parts[5]):03d}"}
                    })
        return pd.DataFrame(records)
    except Exception: return pd.DataFrame()

def find_strongest_connection(all_data, target_market_name, analysis_days=90):
    """‡§¶‡§ø‡§è ‡§ó‡§è ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§¨‡§∏‡•á ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§®‡§ø‡§Ø‡§Æ ‡§¢‡•Ç‡§Ç‡§¢‡§§‡§æ ‡§π‡•à‡•§"""
    strongest_rule = None
    highest_success_rate = 0.0
    
    # ‡§®‡§ø‡§Ø‡§Æ: ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡§æ ‡§ï‡•ç‡§≤‡•ã‡§ú ‡§™‡•à‡§®‡§≤, ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡•Ä ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ï‡•ã ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•à
    rule_func = lambda s, t: bool(s['Close_Pana_Digits'].intersection({t['Open'], t['Close']}))
    rule_desc = "‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡§æ Close Panel, ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡•Ä Jodi ‡§Æ‡•á‡§Ç"

    for source_market_name, source_df in all_data.items():
        if source_market_name == target_market_name: continue # ‡§ñ‡•Å‡§¶ ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§æ‡§Ç‡§ö‡§®‡§æ

        target_df = all_data[target_market_name]
        
        hits, attempts = 0, 0
        max_len = min(len(source_df), len(target_df))
        if max_len < analysis_days: continue

        for i in range(max_len - 1):
            # ‡§π‡§Æ ‡§™‡§ø‡§õ‡§≤‡•á ‡§¶‡§ø‡§® ‡§ï‡§æ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§î‡§∞ ‡§Ü‡§ú ‡§ï‡•á ‡§¶‡§ø‡§® ‡§ï‡§æ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§≤‡•á‡§Ç‡§ó‡•á
            source_row = source_df.iloc[i]
            target_row = target_df.iloc[i + 1]
            attempts += 1
            if rule_func(source_row, target_row):
                hits += 1
        
        if attempts > 20: # ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 20 ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡•Ä ‡§Æ‡§æ‡§®‡•á‡§Ç
            success_rate = (hits / attempts) * 100
            if success_rate > highest_success_rate:
                highest_success_rate = success_rate
                strongest_rule = {
                    "source_market": source_market_name,
                    "target_market": target_market_name,
                    "rule_desc": rule_desc,
                    "success_rate": success_rate,
                    "record": f"{hits}/{attempts}"
                }
    return strongest_rule

def generate_predictions(strongest_rule, all_data):
    """‡§Æ‡§ø‡§≤‡•á ‡§π‡•Å‡§è ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    if not strongest_rule: return None
    
    source_market_name = strongest_rule['source_market']
    # ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ï‡§æ ‡§∏‡§¨‡§∏‡•á ‡§§‡§æ‡§ú‡§æ ‡§°‡•á‡§ü‡§æ (‡§Ü‡§ú ‡§ï‡§æ) ‡§≤‡•á‡§Ç
    latest_source_data = all_data[source_market_name].iloc[-1]
    
    # ‡§®‡§ø‡§Ø‡§Æ ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡•á‡§Ç
    candidate_anks = list(latest_source_data['Close_Pana_Digits'])
    
    if len(candidate_anks) < 2: return None

    # ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ú‡•á‡§®‡§∞‡•á‡§∂‡§®
    otc = candidate_anks[:2]
    
    jodis = [f"{otc[0]}{otc[1]}", f"{otc[1]}{otc[0]}"]
    if len(candidate_anks) > 2:
        jodis.append(f"{otc[0]}{candidate_anks[2]}")
    
    # ‡§™‡•à‡§®‡§≤ ‡§ú‡•á‡§®‡§∞‡•á‡§∂‡§® (‡§∏‡§∞‡§≤ ‡§§‡§∞‡•Ä‡§ï‡§æ)
    panels = []
    for ank in otc:
        panels.append(f"{ank}{ank}{ (ank*2+1) % 10 }") # ‡§è‡§ï DP
        panels.append(f"1{ank}{ (10-1-ank) % 10 }")     # ‡§è‡§ï SP
        
    return {"otc": otc, "jodi": jodis, "panel": panels}

# ==============================================================================
# 2. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ
# ==============================================================================
def main():
    os.system('cls' if os.name == 'nt' else 'clear')
    banner = Text("üëë PROJECT SAMRAAT v2.0 - THE FINAL VERDICT üëë", justify="center", style="bold yellow on purple")
    console.print(Panel(banner, border_style="purple", subtitle="[white]‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£... ‡§®‡§ø‡§Ø‡§Æ... ‡§î‡§∞ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§´‡•à‡§∏‡§≤‡§æ...[/white]"))

    # --- ‡§∏‡§≠‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ---
    with Live(Spinner("dots", text="[cyan]‡§∏‡§≠‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...[/cyan]"), console=console, transient=True) as live:
        all_markets_data = {
            f.replace('.txt', ''): load_and_prepare_data(os.path.join(DATA_DIR, f))
            for f in os.listdir(DATA_DIR) if f.endswith('.txt')
        }
        live.update(Spinner("dots", text=f"[green]{len(all_markets_data)} ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡•§[/green]"))
        time.sleep(1)

    # --- ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ö‡•Å‡§®‡•á‡§Ç ---
    market_names = list(all_markets_data.keys())
    market_table = Table(title="[bold]‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü, ‡§ï‡§≤ ‡§ï‡§ø‡§∏ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§™‡§∞ ‡§®‡§ø‡§∂‡§æ‡§®‡§æ ‡§≤‡§ó‡§æ‡§®‡§æ ‡§π‡•à?[/bold]", border_style="cyan")
    market_table.add_column("#", style="green"); market_table.add_column("‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ï‡§æ ‡§®‡§æ‡§Æ", style="white")
    for i, market in enumerate(market_names, 1): market_table.add_row(str(i), market)
    console.print(market_table)
    choice_str = Prompt.ask("[bold]üëâ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ö‡•Å‡§®‡•á‡§Ç[/bold]", choices=[str(i) for i in range(1, len(market_names) + 1)])
    target_market = market_names[int(choice_str) - 1]

    # --- ‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü ‡§ï‡§æ ‡§¶‡§ø‡§Æ‡§æ‡§ó ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à ---
    with console.status("[bold yellow]‡§∏‡§¨‡§∏‡•á ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§®‡§ø‡§Ø‡§Æ ‡§¢‡•Ç‡§Ç‡§¢‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...[/bold yellow]") as status:
        strongest_connection = find_strongest_connection(all_markets_data, target_market)
        
        if not strongest_connection:
            console.print("[bold red]‡§ï‡•ã‡§à ‡§≠‡§∞‡•ã‡§∏‡•á‡§Æ‡§Ç‡§¶ ‡§®‡§ø‡§Ø‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§Ü‡§ú ‡§ï‡§æ ‡§¶‡§ø‡§® ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§≠‡§∞‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§[/bold red]"); sys.exit(1)
        
        status.update("[bold green]‡§®‡§ø‡§Ø‡§Æ ‡§Æ‡§ø‡§≤ ‡§ó‡§Ø‡§æ! ‡§Ö‡§¨ ‡§ï‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...[/bold green]")
        final_prediction = generate_predictions(strongest_connection, all_markets_data)
        time.sleep(2)

    # --- ‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü ‡§ï‡§æ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§´‡•à‡§∏‡§≤‡§æ ---
    if not final_prediction:
        console.print("[bold red]‡§®‡§ø‡§Ø‡§Æ ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§°‡•á‡§ü‡§æ ‡§Ö‡§ß‡•Ç‡§∞‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§[/bold red]"); sys.exit(1)

    report_text = f"""
[bold]‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü:[/bold] [cyan]{target_market}[/cyan]

[bold]‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü ‡§ï‡§æ ‡§ö‡•Å‡§®‡§æ ‡§π‡•Å‡§Ü ‡§®‡§ø‡§Ø‡§Æ:[/bold]
[yellow]{strongest_connection['rule_desc']} ({strongest_connection['source_market']} -> {strongest_connection['target_market']})[/yellow]
(‡§∏‡§´‡§≤‡§§‡§æ ‡§¶‡§∞: {strongest_connection['success_rate']:.2f}%)

[bold]‡§Ü‡§ú ‡§ï‡§æ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§°‡•á‡§ü‡§æ ([/bold][white]{strongest_connection['source_market']}[/white][bold]):[/bold]
Close Panel: [magenta]{all_markets_data[strongest_connection['source_market']].iloc[-1]['Close_Pana']}[/magenta]
"""
    console.print(Panel(Text.from_markup(report_text), title="[bold]‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü[/bold]", border_style="yellow"))

    prediction_table = Table(title="[bold red]üî• ‡§ï‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü üî•[/bold red]", show_header=False, border_style="red")
    prediction_table.add_row("[bold cyan]OTC[/bold cyan]", '   -   '.join(map(str, final_prediction['otc'])))
    prediction_table.add_row("[bold magenta]JODI[/bold magenta]", '   -   '.join(map(str, final_prediction['jodi'])))
    prediction_table.add_row("[bold yellow]PANEL[/bold yellow]", '   -   '.join(map(str, final_prediction['panel'])))
    console.print(prediction_table)

if __name__ == "__main__":
    main()
